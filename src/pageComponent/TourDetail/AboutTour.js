/* eslint-disable react/no-unescaped-entities */
'use client'
import Image from 'next/image'
import line from '@/assets/images/tourDetail/line.png'
import inclusion from '@/assets/images/tourDetail/inclusion.svg'
import exclusion from '@/assets/images/tourDetail/exclusion.svg'

import TableData from './TableData'
import ReviewItem from '@/components/Common/ReviewItem'
import SlideTour from '@/components/Common/SlideTour'
import { useEffect, useRef, useState } from 'react'
import TourDetailStep from './TourDetailStep'
import scrollDown from '@/helpers/scrollDown'
import Price from './Price'
import { ACCOM_REF, BRIEF_REF, OVERVIEW_REF, ROLE_REF, TOUR_DETAIL_REF } from '../../lib/constants'
import { createTheme, useMediaQuery } from '@mui/material'
import Button from '@/components/Common/Button'
import { useRouter } from 'next/navigation'
import PriceMb from './PriceMb'
import ModalCustom from '@/components/Common/ModalCustom'
import BookTour from '@/components/Common/BookTour'
import vw from '@/helpers/convertToVw'
import Link from 'next/link'

export default function AboutTour(props) {
  const { type, data, headerData = {}, relatedTours = [], lang, dataBookTour, price } = props
  const { contentHeader, relatedTourHeader, bannerHeaders } = headerData
  const { reviews, banner, content = {} } = data || []

  const { accommodation, brief, inclusionAndExclusion, overview, tourDetailed } = content
  const [activeIcon, setActiveIcon] = useState(0)
  //check mobile
  const theme = createTheme({
    breakpoints: {
      values: {
        sm: 768
      }
    }
  })
  const onlySmallScreen = useMediaQuery(theme.breakpoints.down('sm'))
  // data
  const stepData = [
    {
      title: contentHeader?.sectionHeader?.overviewHeader,
      img: (
        <>
          <g clipPath='url(#clip0_1564_18827)'>
            <path
              d='M48.9103 52.9694L44.0238 47.9592C43.5509 47.499 42.9378 47.2199 42.2877 47.169C41.6376 47.1181 40.9902 47.2985 40.4546 47.6798L37.9525 45.1152C39.4321 43.2637 40.1882 40.9147 40.0742 38.5239C39.9603 36.1331 38.9843 33.8709 37.3357 32.1762L37.3154 32.1592V9.24968C37.3147 8.49889 37.0235 7.77907 36.5057 7.24819C35.9879 6.7173 35.2859 6.41872 34.5536 6.41797H2.79304C2.06079 6.41872 1.35874 6.7173 0.840967 7.24819C0.32319 7.77907 0.0319812 8.49889 0.03125 9.24968V56.4449C0.0319812 57.1957 0.32319 57.9155 0.840967 58.4464C1.35874 58.9772 2.06079 59.2758 2.79304 59.2766H34.5536C35.2859 59.2758 35.9879 58.9772 36.5057 58.4464C37.0235 57.9155 37.3147 57.1957 37.3154 56.4449V47.1314L39.1502 49.0116C38.7639 49.5559 38.5793 50.2235 38.6296 50.8946C38.6799 51.5657 38.9617 52.1966 39.4245 52.674L44.311 57.6852C44.6129 57.9952 44.9713 58.2413 45.3659 58.4092C45.7606 58.5771 46.1836 58.6637 46.6109 58.6639C47.0381 58.6641 47.4612 58.578 47.856 58.4104C48.2508 58.2429 48.6095 57.9972 48.9116 57.6874C49.2137 57.3777 49.4533 57.0099 49.6168 56.6051C49.7802 56.2003 49.8642 55.7665 49.864 55.3284C49.8638 54.8903 49.7794 54.4566 49.6156 54.052C49.4518 53.6474 49.2118 53.2798 48.9094 52.9704L48.9103 52.9694ZM36.033 44.4809C34.9752 45.5644 33.6278 46.3021 32.1612 46.6007C30.6945 46.8992 29.1745 46.7452 27.7932 46.1582C26.4119 45.5711 25.2313 44.5774 24.4007 43.3025C23.5702 42.0277 23.1269 40.529 23.1269 38.9959C23.1269 37.4627 23.5702 35.964 24.4007 34.6892C25.2313 33.4143 26.4119 32.4206 27.7932 31.8335C29.1745 31.2465 30.6945 31.0925 32.1612 31.3911C33.6278 31.6896 34.9752 32.4273 36.033 33.5108C37.4446 34.9694 38.2368 36.941 38.2368 38.9959C38.2368 41.0507 37.4446 43.0223 36.033 44.4809ZM34.5536 57.3888H2.79304C2.54888 57.3888 2.31473 57.2893 2.14208 57.1123C1.96943 56.9353 1.87244 56.6952 1.87244 56.4449V9.24968C1.87244 8.99934 1.96943 8.75926 2.14208 8.58224C2.31473 8.40522 2.54888 8.30578 2.79304 8.30578H34.5536C34.7978 8.30578 35.0319 8.40522 35.2046 8.58224C35.3772 8.75926 35.4742 8.99934 35.4742 9.24968V30.7084C34.2189 29.9404 32.8058 29.4841 31.3478 29.376C29.8898 29.2678 28.4274 29.5108 27.0773 30.0855C25.7272 30.6602 24.527 31.5506 23.5724 32.6857C22.6178 33.8209 21.9354 35.1691 21.5797 36.6229H6.28302C6.03886 36.6229 5.80471 36.7223 5.63206 36.8994C5.45942 37.0764 5.36242 37.3165 5.36242 37.5668C5.36242 37.8171 5.45942 38.0572 5.63206 38.2342C5.80471 38.4112 6.03886 38.5107 6.28302 38.5107H21.3035C21.2147 40.2509 21.5884 41.9831 22.3848 43.5226C23.1812 45.062 24.3703 46.3508 25.8253 47.2515C27.2802 48.1521 28.9464 48.6308 30.6459 48.6364C32.3454 48.642 34.0146 48.1744 35.4751 47.2833V56.4449C35.4751 56.6952 35.3781 56.9353 35.2055 57.1123C35.0329 57.2893 34.7978 57.3888 34.5536 57.3888ZM47.6077 56.3401C47.4782 56.4769 47.3232 56.5857 47.152 56.66C46.9807 56.7343 46.7966 56.7726 46.6107 56.7726C46.4247 56.7726 46.2407 56.7343 46.0694 56.66C45.8981 56.5857 45.7432 56.4769 45.6137 56.3401L40.7271 51.2119C40.5543 51.0288 40.4576 50.784 40.4574 50.5291C40.4572 50.2743 40.5536 50.0294 40.7262 49.846L41.4194 49.1192C41.5042 49.0302 41.6054 48.9595 41.7172 48.9112C41.8289 48.863 41.949 48.8381 42.0703 48.8381C42.1916 48.8381 42.3116 48.863 42.4234 48.9112C42.5352 48.9595 42.6364 49.0302 42.7211 49.1192L47.6086 54.2465C47.8724 54.5279 48.0198 54.903 48.0198 55.2933C48.0198 55.6836 47.8715 56.0588 47.6077 56.3401Z'
              fill='currentColor'
            />
            <path
              d='M16.3368 46.0617H6.28388C6.03972 46.0617 5.80556 46.1612 5.63292 46.3382C5.46027 46.5152 5.36328 46.7553 5.36328 47.0056C5.36328 47.256 5.46027 47.4961 5.63292 47.6731C5.80556 47.8501 6.03972 47.9495 6.28388 47.9495H16.3368C16.581 47.9495 16.8151 47.8501 16.9878 47.6731C17.1604 47.4961 17.2574 47.256 17.2574 47.0056C17.2574 46.7553 17.1604 46.5152 16.9878 46.3382C16.8151 46.1612 16.581 46.0617 16.3368 46.0617ZM6.28388 29.0715H20.0192C20.2633 29.0715 20.4975 28.972 20.6701 28.795C20.8428 28.618 20.9398 28.3779 20.9398 28.1276C20.9398 27.8772 20.8428 27.6371 20.6701 27.4601C20.4975 27.2831 20.2633 27.1837 20.0192 27.1837H6.28388C6.03972 27.1837 5.80556 27.2831 5.63292 27.4601C5.46027 27.6371 5.36328 27.8772 5.36328 28.1276C5.36328 28.3779 5.46027 28.618 5.63292 28.795C5.80556 28.972 6.03972 29.0715 6.28388 29.0715ZM6.28388 19.6324H31.0663C31.3105 19.6324 31.5447 19.533 31.7173 19.356C31.8899 19.179 31.9869 18.9389 31.9869 18.6885C31.9869 18.4382 31.8899 18.1981 31.7173 18.0211C31.5447 17.8441 31.3105 17.7446 31.0663 17.7446H6.28388C6.03972 17.7446 5.80556 17.8441 5.63292 18.0211C5.46027 18.1981 5.36328 18.4382 5.36328 18.6885C5.36328 18.9389 5.46027 19.179 5.63292 19.356C5.80556 19.533 6.03972 19.6324 6.28388 19.6324Z'
              fill='currentColor'
            />
            <circle
              cx='51.9683'
              cy='21.1451'
              r='10.5191'
              fill='#FFD220'
            />
          </g>
          <defs>
            <clipPath id='clip0_1564_18827'>
              <rect
                width='63.1148'
                height='63.1148'
                fill='white'
                transform='translate(0.425781 0.106445)'
              />
            </clipPath>
          </defs>
        </>
      ),
      key: 'overviewRef'
    },
    {
      title: contentHeader?.sectionHeader?.briefHeader,
      img: (
        <>
          <path
            d='M56.1094 8.375H51.1875V6.40625C51.1875 5.36196 50.7727 4.36044 50.0342 3.62202C49.2958 2.88359 48.2943 2.46875 47.25 2.46875C46.2057 2.46875 45.2042 2.88359 44.4658 3.62202C43.7273 4.36044 43.3125 5.36196 43.3125 6.40625V8.375H35.4375V6.40625C35.4375 5.36196 35.0227 4.36044 34.2842 3.62202C33.5458 2.88359 32.5443 2.46875 31.5 2.46875C30.4557 2.46875 29.4542 2.88359 28.7158 3.62202C27.9773 4.36044 27.5625 5.36196 27.5625 6.40625V8.375H19.6875V6.40625C19.6875 5.36196 19.2727 4.36044 18.5342 3.62202C17.7958 2.88359 16.7943 2.46875 15.75 2.46875C14.7057 2.46875 13.7042 2.88359 12.9658 3.62202C12.2273 4.36044 11.8125 5.36196 11.8125 6.40625V8.375H6.89062C5.58526 8.375 4.33336 8.89355 3.41033 9.81658C2.4873 10.7396 1.96875 11.9915 1.96875 13.2969V52.6719C1.96875 53.9772 2.4873 55.2291 3.41033 56.1522C4.33336 57.0752 5.58526 57.5938 6.89062 57.5938H34.4531C34.7142 57.5938 34.9646 57.49 35.1492 57.3054C35.3338 57.1208 35.4375 56.8704 35.4375 56.6094C35.4375 56.3483 35.3338 56.0979 35.1492 55.9133C34.9646 55.7287 34.7142 55.625 34.4531 55.625H6.89062C6.10813 55.6227 5.35834 55.3108 4.80503 54.7575C4.25172 54.2042 3.93984 53.4544 3.9375 52.6719V22.1562H59.0625V38.8906C59.0625 39.1517 59.1662 39.4021 59.3508 39.5867C59.5354 39.7713 59.7858 39.875 60.0469 39.875C60.3079 39.875 60.5583 39.7713 60.7429 39.5867C60.9275 39.4021 61.0312 39.1517 61.0312 38.8906V13.2969C61.0312 11.9915 60.5127 10.7396 59.5897 9.81658C58.6666 8.89355 57.4147 8.375 56.1094 8.375ZM45.2812 6.40625C45.2812 5.8841 45.4887 5.38335 45.8579 5.01413C46.2271 4.64492 46.7279 4.4375 47.25 4.4375C47.7721 4.4375 48.2729 4.64492 48.6421 5.01413C49.0113 5.38335 49.2188 5.8841 49.2188 6.40625V12.3125C49.2188 12.8346 49.0113 13.3354 48.6421 13.7046C48.2729 14.0738 47.7721 14.2812 47.25 14.2812C46.7279 14.2812 46.2271 14.0738 45.8579 13.7046C45.4887 13.3354 45.2812 12.8346 45.2812 12.3125V6.40625ZM29.5312 6.40625C29.5312 5.8841 29.7387 5.38335 30.1079 5.01413C30.4771 4.64492 30.9779 4.4375 31.5 4.4375C32.0221 4.4375 32.5229 4.64492 32.8921 5.01413C33.2613 5.38335 33.4688 5.8841 33.4688 6.40625V12.3125C33.4688 12.8346 33.2613 13.3354 32.8921 13.7046C32.5229 14.0738 32.0221 14.2812 31.5 14.2812C30.9779 14.2812 30.4771 14.0738 30.1079 13.7046C29.7387 13.3354 29.5312 12.8346 29.5312 12.3125V6.40625ZM13.7812 6.40625C13.7812 5.8841 13.9887 5.38335 14.3579 5.01413C14.7271 4.64492 15.2279 4.4375 15.75 4.4375C16.2721 4.4375 16.7729 4.64492 17.1421 5.01413C17.5113 5.38335 17.7188 5.8841 17.7188 6.40625V12.3125C17.7188 12.8346 17.5113 13.3354 17.1421 13.7046C16.7729 14.0738 16.2721 14.2812 15.75 14.2812C15.2279 14.2812 14.7271 14.0738 14.3579 13.7046C13.9887 13.3354 13.7812 12.8346 13.7812 12.3125V6.40625ZM59.0625 20.1875H3.9375V13.2969C3.93984 12.5144 4.25172 11.7646 4.80503 11.2113C5.35834 10.658 6.10813 10.3461 6.89062 10.3438H11.8125V12.3125C11.8125 13.3568 12.2273 14.3583 12.9658 15.0967C13.7042 15.8352 14.7057 16.25 15.75 16.25C16.7943 16.25 17.7958 15.8352 18.5342 15.0967C19.2727 14.3583 19.6875 13.3568 19.6875 12.3125V10.3438H27.5625V12.3125C27.5625 13.3568 27.9773 14.3583 28.7158 15.0967C29.4542 15.8352 30.4557 16.25 31.5 16.25C32.5443 16.25 33.5458 15.8352 34.2842 15.0967C35.0227 14.3583 35.4375 13.3568 35.4375 12.3125V10.3438H43.3125V12.3125C43.3125 13.3568 43.7273 14.3583 44.4658 15.0967C45.2042 15.8352 46.2057 16.25 47.25 16.25C48.2943 16.25 49.2958 15.8352 50.0342 15.0967C50.7727 14.3583 51.1875 13.3568 51.1875 12.3125V10.3438H56.1094C56.8919 10.3461 57.6417 10.658 58.195 11.2113C58.7483 11.7646 59.0602 12.5144 59.0625 13.2969V20.1875Z'
            fill='currentColor'
            stroke='white'
            strokeWidth='0.3'
          />
          <path
            d='M29.5312 29.0469C29.5312 28.5247 29.3238 28.024 28.9546 27.6548C28.5854 27.2855 28.0846 27.0781 27.5625 27.0781H23.625C23.1029 27.0781 22.6021 27.2855 22.2329 27.6548C21.8637 28.024 21.6562 28.5247 21.6562 29.0469V32C21.6562 32.5221 21.8637 33.0229 22.2329 33.3921C22.6021 33.7613 23.1029 33.9688 23.625 33.9688H27.5625C28.0846 33.9688 28.5854 33.7613 28.9546 33.3921C29.3238 33.0229 29.5312 32.5221 29.5312 32V29.0469ZM23.625 32V29.0469H27.5625V32H23.625ZM17.7188 29.0469C17.7188 28.5247 17.5113 28.024 17.1421 27.6548C16.7729 27.2855 16.2721 27.0781 15.75 27.0781H11.8125C11.2904 27.0781 10.7896 27.2855 10.4204 27.6548C10.0512 28.024 9.84375 28.5247 9.84375 29.0469V32C9.84375 32.5221 10.0512 33.0229 10.4204 33.3921C10.7896 33.7613 11.2904 33.9688 11.8125 33.9688H15.75C16.2721 33.9688 16.7729 33.7613 17.1421 33.3921C17.5113 33.0229 17.7188 32.5221 17.7188 32V29.0469ZM11.8125 32V29.0469H15.75V32H11.8125ZM51.1875 33.9688C51.7096 33.9688 52.2104 33.7613 52.5796 33.3921C52.9488 33.0229 53.1562 32.5221 53.1562 32V29.0469C53.1562 28.5247 52.9488 28.024 52.5796 27.6548C52.2104 27.2855 51.7096 27.0781 51.1875 27.0781H47.25C46.7279 27.0781 46.2271 27.2855 45.8579 27.6548C45.4887 28.024 45.2812 28.5247 45.2812 29.0469V32C45.2812 32.5221 45.4887 33.0229 45.8579 33.3921C46.2271 33.7613 46.7279 33.9688 47.25 33.9688H51.1875ZM47.25 29.0469H51.1875V32H47.25V29.0469ZM29.5312 37.9062C29.5312 37.3841 29.3238 36.8833 28.9546 36.5141C28.5854 36.1449 28.0846 35.9375 27.5625 35.9375H23.625C23.1029 35.9375 22.6021 36.1449 22.2329 36.5141C21.8637 36.8833 21.6562 37.3841 21.6562 37.9062V40.8594C21.6562 41.3815 21.8637 41.8823 22.2329 42.2515C22.6021 42.6207 23.1029 42.8281 23.625 42.8281H27.5625C28.0846 42.8281 28.5854 42.6207 28.9546 42.2515C29.3238 41.8823 29.5312 41.3815 29.5312 40.8594V37.9062ZM23.625 40.8594V37.9062H27.5625V40.8594H23.625ZM17.7188 37.9062C17.7188 37.3841 17.5113 36.8833 17.1421 36.5141C16.7729 36.1449 16.2721 35.9375 15.75 35.9375H11.8125C11.2904 35.9375 10.7896 36.1449 10.4204 36.5141C10.0512 36.8833 9.84375 37.3841 9.84375 37.9062V40.8594C9.84375 41.3815 10.0512 41.8823 10.4204 42.2515C10.7896 42.6207 11.2904 42.8281 11.8125 42.8281H15.75C16.2721 42.8281 16.7729 42.6207 17.1421 42.2515C17.5113 41.8823 17.7188 41.3815 17.7188 40.8594V37.9062ZM11.8125 40.8594V37.9062H15.75V40.8594H11.8125ZM27.5625 44.7969H23.625C23.1029 44.7969 22.6021 45.0043 22.2329 45.3735C21.8637 45.7427 21.6562 46.2435 21.6562 46.7656V49.7188C21.6562 50.2409 21.8637 50.7417 22.2329 51.1109C22.6021 51.4801 23.1029 51.6875 23.625 51.6875H27.5625C28.0846 51.6875 28.5854 51.4801 28.9546 51.1109C29.3238 50.7417 29.5312 50.2409 29.5312 49.7188V46.7656C29.5312 46.2435 29.3238 45.7427 28.9546 45.3735C28.5854 45.0043 28.0846 44.7969 27.5625 44.7969ZM23.625 49.7188V46.7656H27.5625V49.7188H23.625ZM35.4375 33.9688H39.375C39.8971 33.9688 40.3979 33.7613 40.7671 33.3921C41.1363 33.0229 41.3438 32.5221 41.3438 32V29.0469C41.3438 28.5247 41.1363 28.024 40.7671 27.6548C40.3979 27.2855 39.8971 27.0781 39.375 27.0781H35.4375C34.9154 27.0781 34.4146 27.2855 34.0454 27.6548C33.6762 28.024 33.4688 28.5247 33.4688 29.0469V32C33.4688 32.5221 33.6762 33.0229 34.0454 33.3921C34.4146 33.7613 34.9154 33.9688 35.4375 33.9688ZM35.4375 29.0469H39.375V32H35.4375V29.0469ZM33.4688 40.8594C33.4688 41.3815 33.6762 41.8823 34.0454 42.2515C34.4146 42.6207 34.9154 42.8281 35.4375 42.8281C35.6986 42.8281 35.949 42.7244 36.1336 42.5398C36.3182 42.3552 36.4219 42.1048 36.4219 41.8438C36.4219 41.5827 36.3182 41.3323 36.1336 41.1477C35.949 40.9631 35.6986 40.8594 35.4375 40.8594V37.9062H39.375C39.6361 37.9062 39.8865 37.8025 40.0711 37.6179C40.2557 37.4333 40.3594 37.1829 40.3594 36.9219C40.3594 36.6608 40.2557 36.4104 40.0711 36.2258C39.8865 36.0412 39.6361 35.9375 39.375 35.9375H35.4375C34.9154 35.9375 34.4146 36.1449 34.0454 36.5141C33.6762 36.8833 33.4688 37.3841 33.4688 37.9062V40.8594ZM15.75 44.7969H11.8125C11.2904 44.7969 10.7896 45.0043 10.4204 45.3735C10.0512 45.7427 9.84375 46.2435 9.84375 46.7656V49.7188C9.84375 50.2409 10.0512 50.7417 10.4204 51.1109C10.7896 51.4801 11.2904 51.6875 11.8125 51.6875H15.75C16.2721 51.6875 16.7729 51.4801 17.1421 51.1109C17.5113 50.7417 17.7188 50.2409 17.7188 49.7188V46.7656C17.7188 46.2435 17.5113 45.7427 17.1421 45.3735C16.7729 45.0043 16.2721 44.7969 15.75 44.7969ZM11.8125 49.7188V46.7656H15.75V49.7188H11.8125Z'
            fill='currentColor'
            stroke='white'
            strokeWidth='0.3'
          />
          <circle
            cx='49.1168'
            cy='49.9019'
            r='10.5191'
            fill='#FFD220'
          />
        </>
      ),
      key: 'briefRef'
    },
    {
      title: contentHeader?.sectionHeader?.tourDetailedHeader,
      img: (
        <>
          <g clipPath='url(#clip0_1564_18841)'>
            <path
              d='M49.7791 16.2097V24.5898C49.7791 24.7853 49.8596 24.9729 50.0027 25.1112C50.1458 25.2495 50.34 25.3272 50.5424 25.3272C50.7449 25.3272 50.939 25.2495 51.0821 25.1112C51.2253 24.9729 51.3057 24.7853 51.3057 24.5898V16.2097C55.1925 15.8024 58.0015 12.4283 57.58 8.67326C57.1584 4.91837 53.6659 2.20445 49.7791 2.61175C45.8924 3.01904 43.0834 6.39319 43.505 10.1482C43.8635 13.3414 46.4739 15.8634 49.7791 16.2097ZM50.5424 4.04699C53.6089 4.04724 56.0945 6.44911 56.0943 9.41165C56.094 12.3742 53.6079 14.7756 50.5414 14.7753C47.4752 14.7751 44.9896 12.3735 44.9896 9.41116C44.9934 6.44997 47.4773 4.05043 50.5424 4.04699ZM50.5424 32.2567C51.1883 32.2567 51.7118 31.751 51.7118 31.127C51.7118 30.503 51.1883 29.9973 50.5424 29.9973C49.8966 29.9973 49.3731 30.503 49.3731 31.127V31.1271C49.3734 31.4267 49.4967 31.7138 49.7159 31.9256C49.9351 32.1374 50.2324 32.2565 50.5424 32.2567ZM50.5424 30.7819C50.5899 30.781 50.6371 30.7893 50.6813 30.8063C50.7254 30.8233 50.7656 30.8486 50.7995 30.8807C50.8335 30.9129 50.8604 30.9512 50.8788 30.9935C50.8972 31.0359 50.9066 31.0813 50.9066 31.1272C50.9066 31.1731 50.8972 31.2185 50.8788 31.2609C50.8604 31.3032 50.8335 31.3415 50.7995 31.3737C50.7656 31.4058 50.7254 31.4311 50.6813 31.4481C50.6371 31.4651 50.5899 31.4734 50.5424 31.4725C50.4488 31.4708 50.3596 31.4337 50.294 31.3691C50.2284 31.3045 50.1917 31.2177 50.1917 31.1272C50.1917 31.0367 50.2284 30.9499 50.294 30.8853C50.3596 30.8207 50.4488 30.7836 50.5424 30.7819ZM15.3998 57.9041C14.754 57.9041 14.2305 58.4098 14.2305 59.0338C14.2305 59.6578 14.754 60.1635 15.3998 60.1635C16.0457 60.1635 16.5692 59.6578 16.5692 59.0338C16.5689 58.7343 16.4456 58.447 16.2263 58.2352C16.0071 58.0234 15.7098 57.9043 15.3998 57.9041ZM15.3998 59.3789C15.3523 59.3798 15.3051 59.3715 15.261 59.3545C15.2168 59.3375 15.1766 59.3123 15.1427 59.2801C15.1088 59.248 15.0818 59.2096 15.0635 59.1673C15.0451 59.125 15.0356 59.0795 15.0356 59.0336C15.0356 58.9877 15.0451 58.9423 15.0635 58.8999C15.0818 58.8576 15.1088 58.8193 15.1427 58.7871C15.1766 58.755 15.2168 58.7297 15.261 58.7127C15.3051 58.6957 15.3523 58.6875 15.3998 58.6883C15.4934 58.69 15.5826 58.7271 15.6482 58.7917C15.7138 58.8563 15.7505 58.9431 15.7505 59.0336C15.7505 59.1241 15.7138 59.2109 15.6482 59.2755C15.5826 59.3401 15.4934 59.3772 15.3998 59.3789Z'
              fill='currentColor'
            />
            <path
              d='M33.4264 45.4062H42.8486C46.5564 45.3904 49.5751 48.3145 49.5913 51.9372C49.6075 55.5601 46.6148 58.5096 42.9072 58.5255H19.4101C19.3704 58.5258 19.3308 58.5291 19.2917 58.5355C18.8761 56.337 16.7154 54.884 14.4654 55.29C12.2154 55.696 10.7283 57.8073 11.1439 60.0058C11.5594 62.2043 13.7202 63.6573 15.9701 63.2513C16.7949 63.1024 17.5541 62.7125 18.1472 62.133C18.7402 61.5535 19.1393 60.8117 19.2917 60.0058C19.3308 60.012 19.3705 60.0154 19.4101 60.0156H42.8486C47.3985 60.0331 51.1016 56.4433 51.1195 51.9976C51.1374 47.5519 47.4635 43.9336 42.9136 43.9161C42.8919 43.916 42.8703 43.916 42.8486 43.9161H33.4264C29.8961 43.9161 27.0342 41.1198 27.0342 37.6703C27.0342 34.2208 29.8961 31.4244 33.4264 31.4244H46.1981C46.3956 33.651 48.4029 35.2995 50.6816 35.1065C52.9603 34.9135 54.6474 32.9523 54.4499 30.7257C54.2524 28.4992 52.2452 26.8507 49.9665 27.0437C49.136 27.114 48.3466 27.4275 47.7015 27.9432C47.0564 28.459 46.5856 29.153 46.3506 29.9344H33.4264C29.0539 29.9344 25.5093 33.3979 25.5093 37.6703C25.5093 41.9428 29.0539 45.4062 33.4264 45.4062ZM15.2191 61.828C13.7733 61.828 12.6012 60.6828 12.6012 59.2701C12.6012 57.8574 13.7733 56.7121 15.2191 56.7121C16.6649 56.7121 17.837 57.8574 17.837 59.2701C17.8356 60.6823 16.6644 61.8266 15.2191 61.828ZM50.3252 28.5182C51.771 28.5182 52.9431 29.6634 52.9431 31.0761C52.9431 32.4888 51.771 33.6341 50.3252 33.6341C48.8794 33.6341 47.7073 32.4888 47.7073 31.0761C47.7087 29.6641 48.88 28.5196 50.3252 28.5182ZM15.1348 45.9306C17.1171 45.9307 18.7239 44.3607 18.724 42.4238C18.7241 40.487 17.1173 38.917 15.1351 38.9168C13.1529 38.9167 11.5461 40.4867 11.5459 42.4236V42.4237C11.5482 44.3595 13.1536 45.9283 15.1348 45.9306ZM15.1348 40.407C16.2626 40.3951 17.1867 41.2787 17.1989 42.3806V42.4237C17.2078 43.5375 16.291 44.4476 15.1511 44.4563C14.0112 44.465 13.0798 43.5692 13.0709 42.4554C13.0708 42.4448 13.0708 42.4343 13.0709 42.4237C13.0587 41.3218 13.963 40.419 15.0906 40.407H15.1348Z'
              fill='currentColor'
            />
            <path
              d='M14.1042 53.6457C14.1759 53.7415 14.2689 53.8193 14.3759 53.8729C14.4829 53.9265 14.6009 53.9544 14.7206 53.9544C14.8402 53.9544 14.9583 53.9265 15.0653 53.8729C15.1722 53.8193 15.2653 53.7415 15.3369 53.6457L20.7048 46.4709C21.8412 44.9835 22.4065 43.138 22.2979 41.2693C22.1759 39.3581 21.3656 37.5559 20.0169 36.1962C17.1064 33.2715 12.376 33.26 9.45132 36.1705L9.42554 36.1962C8.07707 37.5555 7.26673 39.3573 7.14451 41.2681C7.0256 43.0511 7.58925 44.8961 8.73707 46.4701L14.1042 53.6457ZM8.67986 41.3695C8.77776 39.8298 9.43026 38.3776 10.5165 37.282C12.8276 34.9602 16.5832 34.9514 18.905 37.2623L18.9246 37.282C20.0112 38.3783 20.6638 39.8312 20.7614 41.3717C20.8453 42.8734 20.3878 44.3553 19.4721 45.5484L14.7206 51.9006L9.97431 45.556C9.04442 44.2804 8.58494 42.7941 8.67986 41.3695Z'
              fill='currentColor'
            />
            <circle
              cx='27.1168'
              cy='17.0352'
              r='10.5191'
              fill='#FFD220'
            />
          </g>
          <defs>
            <clipPath id='clip0_1564_18841'>
              <rect
                width='63.1148'
                height='63.1148'
                fill='currentColor'
                transform='translate(0.818359 0.20459)'
              />
            </clipPath>
          </defs>
        </>
      ),
      key: 'tourDetailRef'
    },
    {
      title: `${contentHeader?.sectionHeader?.inclusionExclusionHeader?.inclusionHeader} & ${contentHeader?.sectionHeader?.inclusionExclusionHeader?.exclusionHeader}`,
      img: (
        <>
          <path
            d='M33.1172 51.3735C33.3816 51.6393 33.6961 51.8501 34.0424 51.9936C34.3888 52.1371 34.7602 52.2105 35.1351 52.2095H35.2436C35.6335 52.1957 36.0163 52.1017 36.3682 51.9333C36.7201 51.765 37.0336 51.526 37.289 51.2312L48.4501 38.7904C48.7724 38.4135 48.9321 37.9241 48.8941 37.4296C48.8561 36.9351 48.6235 36.4759 48.2473 36.1527L46.7542 34.8729C46.3807 34.552 45.8956 34.3916 45.4044 34.4266C44.9132 34.4616 44.4558 34.6891 44.1315 35.0597L34.991 45.1758L33.9185 44.1086C33.5673 43.758 33.0914 43.5611 32.5952 43.5611C32.099 43.5611 31.623 43.758 31.2719 44.1086L29.8827 45.4968C29.5326 45.8482 29.3359 46.3241 29.3359 46.8201C29.3359 47.3162 29.5326 47.7921 29.8827 48.1435L33.1172 51.3735ZM31.1402 46.749L32.5294 45.3617C32.5478 45.3462 32.5711 45.3377 32.5952 45.3377C32.6193 45.3377 32.6426 45.3462 32.661 45.3617L34.3952 47.0949C34.5694 47.2647 34.8038 47.3584 35.0471 47.3555C35.1677 47.3524 35.2864 47.3248 35.3961 47.2744C35.5057 47.2239 35.6039 47.1517 35.6847 47.062L45.4673 36.2336C45.4749 36.224 45.4843 36.216 45.4951 36.2103C45.5059 36.2045 45.5177 36.201 45.5299 36.2C45.5421 36.199 45.5543 36.2005 45.5659 36.2044C45.5775 36.2084 45.5881 36.2147 45.5971 36.2229L47.0894 37.5036C47.1038 37.5185 47.1137 37.5372 47.1178 37.5575C47.1219 37.5779 47.1201 37.5989 47.1126 37.6183L35.9506 50.0555C35.8519 50.1698 35.7305 50.2621 35.594 50.3268C35.4576 50.3914 35.3091 50.4268 35.1582 50.4308H35.1351C34.9938 50.4313 34.8539 50.4037 34.7233 50.3496C34.5928 50.2956 34.4743 50.2162 34.3747 50.116L31.1402 46.8815C31.1231 46.8639 31.1135 46.8403 31.1135 46.8157C31.1135 46.7911 31.1231 46.7666 31.1402 46.749Z'
            fill='currentColor'
            stroke='white'
            strokeWidth='0.5'
          />
          <path
            d='M19.5508 40.6479C20.5367 40.645 21.5205 40.5558 22.4909 40.3811C21.845 43.9442 22.3541 47.6204 23.944 50.8739C25.5338 54.1273 28.1214 56.7878 31.3293 58.4676C34.5373 60.1473 38.1979 60.7585 41.7776 60.2119C45.3572 59.6653 48.6687 57.9897 51.2292 55.4291C53.7897 52.8686 55.4654 49.5571 56.012 45.9775C56.5585 42.3979 55.9474 38.7372 54.2676 35.5293C52.5879 32.3213 49.9273 29.7338 46.6739 28.1439C43.4205 26.554 39.7443 26.0449 36.1812 26.6909C36.7847 23.2755 36.3226 19.7571 34.8576 16.6134C33.3926 13.4697 30.9957 10.853 27.9923 9.11846C24.9889 7.38391 21.5245 6.61559 18.0694 6.91779C14.6143 7.22 11.3359 8.57809 8.67927 10.8077C6.02261 13.0373 4.1164 16.0304 3.21942 19.3807C2.32243 22.731 2.47812 26.2761 3.66536 29.5349C4.8526 32.7936 7.01387 35.6081 9.85577 37.5962C12.6977 39.5844 16.0825 40.6498 19.5508 40.6479ZM54.2345 43.3159C54.2345 46.3061 53.3479 49.2291 51.6866 51.7153C50.0254 54.2016 47.6642 56.1394 44.9016 57.2837C42.139 58.4279 39.0992 58.7273 36.1665 58.144C33.2338 57.5606 30.5399 56.1207 28.4255 54.0064C26.3112 51.892 24.8713 49.1981 24.2879 46.2654C23.7046 43.3327 24.004 40.2929 25.1483 37.5303C26.2925 34.7677 28.2303 32.4066 30.7166 30.7453C33.2028 29.0841 36.1258 28.1974 39.116 28.1974C43.1243 28.2018 46.9672 29.7961 49.8015 32.6304C52.6358 35.4647 54.2301 39.3076 54.2345 43.3159ZM19.5508 8.63218C21.8248 8.62652 24.0707 9.13523 26.1204 10.1202C28.1701 11.1053 29.9704 12.5411 31.3867 14.3202C32.8031 16.0994 33.7987 18.1758 34.2991 20.3942C34.7994 22.6125 34.7916 24.9153 34.2763 27.1302C31.5953 27.9377 29.1561 29.3964 27.1763 31.3762C25.1965 33.356 23.7377 35.7953 22.9302 38.4762C20.8529 38.9593 18.6969 38.9975 16.6038 38.5882C14.5107 38.1788 12.5278 37.3313 10.7856 36.1012C9.04331 34.8711 7.58101 33.2863 6.49476 31.4509C5.4085 29.6154 4.72287 27.571 4.48289 25.4518C4.24292 23.3326 4.45404 21.1866 5.10238 19.1547C5.75073 17.1229 6.82162 15.2512 8.24472 13.6627C9.66782 12.0742 11.4109 10.8047 13.3595 9.9377C15.3081 9.0707 17.418 8.62578 19.5508 8.63218Z'
            fill='currentColor'
            stroke='white'
            strokeWidth='0.5'
          />
          <path
            d='M12.9568 29.0931L14.208 30.3453C14.5416 30.6787 14.9939 30.866 15.4655 30.866C15.9372 30.866 16.3895 30.6787 16.7231 30.3453L19.5502 27.5172L22.3774 30.3444C22.5426 30.5096 22.7387 30.6407 22.9545 30.7301C23.1704 30.8196 23.4017 30.8656 23.6354 30.8656C23.869 30.8656 24.1003 30.8196 24.3162 30.7301C24.532 30.6407 24.7281 30.5096 24.8933 30.3444L26.1437 29.0931C26.3089 28.9279 26.44 28.7318 26.5294 28.516C26.6189 28.3001 26.6649 28.0688 26.6649 27.8351C26.6649 27.6015 26.6189 27.3702 26.5294 27.1543C26.44 26.9385 26.3089 26.7424 26.1437 26.5772L23.3165 23.7509L26.1446 20.9237C26.478 20.5902 26.6654 20.1379 26.6654 19.6662C26.6654 19.1946 26.478 18.7423 26.1446 18.4087L24.8933 17.1566C24.5592 16.8242 24.1071 16.6376 23.6358 16.6376C23.1645 16.6376 22.7124 16.8242 22.3783 17.1566L19.5502 19.9846L16.7231 17.1574C16.5579 16.9922 16.3618 16.8611 16.1459 16.7717C15.9301 16.6823 15.6987 16.6362 15.4651 16.6362C15.2315 16.6362 15.0001 16.6823 14.7843 16.7717C14.5684 16.8611 14.3723 16.9922 14.2072 17.1574L12.9568 18.4087C12.7915 18.5739 12.6604 18.77 12.571 18.9858C12.4816 19.2017 12.4355 19.433 12.4355 19.6667C12.4355 19.9003 12.4816 20.1317 12.571 20.3475C12.6604 20.5633 12.7915 20.7595 12.9568 20.9246L15.7839 23.7509L12.9559 26.5781C12.6225 26.9117 12.4354 27.3641 12.4355 27.8358C12.4357 28.3074 12.6232 28.7597 12.9568 29.0931ZM17.6702 24.3797C17.8369 24.2129 17.9306 23.9867 17.9306 23.7509C17.9306 23.5151 17.8369 23.2889 17.6702 23.1222L14.2143 19.6662L15.4655 18.4149L18.9215 21.8709C19.0882 22.0376 19.3144 22.1313 19.5502 22.1313C19.786 22.1313 20.0122 22.0376 20.179 21.8709L23.6358 18.4149L24.8862 19.6671L21.4303 23.1222C21.2635 23.2889 21.1699 23.5151 21.1699 23.7509C21.1699 23.9867 21.2635 24.2129 21.4303 24.3797L24.8862 27.8356L23.6349 29.0869L20.179 25.6309C20.0122 25.4642 19.786 25.3706 19.5502 25.3706C19.3144 25.3706 19.0882 25.4642 18.9215 25.6309L15.4647 29.0869L14.2143 27.8347L17.6702 24.3797Z'
            fill='currentColor'
            stroke='white'
            strokeWidth='0.5'
          />
          <circle
            cx='51.5191'
            cy='11.2515'
            r='10.5191'
            fill='#FFD220'
          />
        </>
      ),
      key: 'roleRef'
    },
    {
      title: contentHeader?.sectionHeader?.accommodation,
      img: (
        <>
          <g clipPath='url(#clip0_1564_18863)'>
            <path
              d='M51.2062 49.2651L52.3443 50.4617C52.5119 50.6365 52.7325 50.7286 52.9707 50.7286H53.0589C53.3236 50.701 53.5618 50.5445 53.7029 50.3144L55.4674 47.5531C55.6968 47.185 55.6527 46.7063 55.3616 46.3934L51.2062 42.0674V35.0814C51.2062 34.5752 50.8092 34.161 50.3239 34.161H45.9127C45.4274 34.161 45.0304 34.5752 45.0304 35.0814V35.6244L43.0101 33.5075C42.666 33.1485 42.1102 33.1485 41.7661 33.5075L38.8635 36.5449V12.9912C38.8635 12.485 38.4665 12.0708 37.9813 12.0708H18.5718C18.0865 12.0708 17.6895 12.485 17.6895 12.9912V24.0363H3.56472C2.59424 24.0363 1.80022 24.8647 1.80022 25.8772V61.7737H0.917969V63.6145H55.6174V61.7737H51.2062V49.2651ZM13.2695 61.7737H7.97596V58.6903C7.97596 57.3372 9.02584 56.2511 10.3227 56.2511H10.9227C12.2196 56.2511 13.2606 57.3372 13.2695 58.6903V61.7737ZM17.6807 61.7737H15.034V58.6903C15.034 56.3248 13.1901 54.4103 10.9227 54.4103H10.3227C8.05537 54.4103 6.22029 56.3248 6.21146 58.6903V61.7737H3.56472V25.8772H17.6807V61.7737ZM46.7949 36.0018H49.4417V40.2266L46.7949 37.4653V36.0018ZM42.3837 35.4588L53.5971 47.1666L52.8295 48.3631L43.0101 38.1096C42.666 37.7506 42.1102 37.7506 41.7661 38.1096L31.9467 48.3631L31.1791 47.1666L42.3925 35.4588H42.3837ZM27.3854 61.7737H25.6209V56.2511H27.3854V61.7737ZM30.9144 61.7737H29.1499V56.2511H30.9144V61.7737ZM33.5612 61.7737H32.6789V55.3307C32.6789 54.8245 32.2819 54.4103 31.7967 54.4103H24.7387C24.2535 54.4103 23.8565 54.8245 23.8565 55.3307V61.7737H19.4452V13.9116H37.0902V38.3857L29.4058 46.3934C29.1147 46.7063 29.0705 47.185 29.2999 47.5531L31.0644 50.3144C31.3291 50.7378 31.8761 50.8574 32.2908 50.5813C32.3437 50.5445 32.3878 50.5077 32.4231 50.4617L33.5612 49.2651V61.7737ZM44.1482 61.7737H40.6192V56.2511C40.6192 55.7449 41.0162 55.3307 41.5014 55.3307H43.2659C43.7512 55.3307 44.1482 55.7449 44.1482 56.2511V61.7737ZM49.4417 61.7737H45.9127V56.2511C45.9127 54.7232 44.7305 53.4899 43.2659 53.4899H41.5014C40.0369 53.4899 38.8547 54.7232 38.8547 56.2511V61.7737H35.3257V47.4243L42.3837 40.0609L49.4417 47.4243V61.7737Z'
              fill='currentColor'
              stroke='white'
              strokeWidth='0.338115'
              strokeMiterlimit={10}
            />
            <path
              d='M21.7609 21.8885H26.0343C26.5044 21.8885 26.889 21.4678 26.889 20.9535V17.2134C26.889 16.6991 26.5044 16.2783 26.0343 16.2783H21.7609C21.2909 16.2783 20.9062 16.6991 20.9062 17.2134V20.9535C20.9062 21.4678 21.2909 21.8885 21.7609 21.8885ZM22.6156 18.1484H25.1796V20.0185H22.6156V18.1484ZM29.453 21.8885H33.7264C34.1965 21.8885 34.5811 21.4678 34.5811 20.9535V17.2134C34.5811 16.6991 34.1965 16.2783 33.7264 16.2783H29.453C28.983 16.2783 28.5984 16.6991 28.5984 17.2134V20.9535C28.5984 21.4678 28.983 21.8885 29.453 21.8885ZM30.3077 18.1484H32.8718V20.0185H30.3077V18.1484ZM21.7609 31.2389H26.0343C26.5044 31.2389 26.889 30.8181 26.889 30.3038V26.5637C26.889 26.0494 26.5044 25.6287 26.0343 25.6287H21.7609C21.2909 25.6287 20.9062 26.0494 20.9062 26.5637V30.3038C20.9062 30.8181 21.2909 31.2389 21.7609 31.2389ZM22.6156 27.4987H25.1796V29.3688H22.6156V27.4987ZM29.453 31.2389H33.7264C34.1965 31.2389 34.5811 30.8181 34.5811 30.3038V26.5637C34.5811 26.0494 34.1965 25.6287 33.7264 25.6287H29.453C28.983 25.6287 28.5984 26.0494 28.5984 26.5637V30.3038C28.5984 30.8181 28.983 31.2389 29.453 31.2389ZM30.3077 27.4987H32.8718V29.3688H30.3077V27.4987ZM21.7609 40.5892H26.0343C26.5044 40.5892 26.889 40.1684 26.889 39.6542V35.914C26.889 35.3998 26.5044 34.979 26.0343 34.979H21.7609C21.2909 34.979 20.9062 35.3998 20.9062 35.914V39.6542C20.9062 40.1684 21.2909 40.5892 21.7609 40.5892ZM22.6156 36.8491H25.1796V38.7191H22.6156V36.8491ZM29.453 40.5892H33.7264C34.1965 40.5892 34.5811 40.1684 34.5811 39.6542V35.914C34.5811 35.3998 34.1965 34.979 33.7264 34.979H29.453C28.983 34.979 28.5984 35.3998 28.5984 35.914V39.6542C28.5984 40.1684 28.983 40.5892 29.453 40.5892ZM30.3077 36.8491H32.8718V38.7191H30.3077V36.8491ZM26.889 49.0045V45.2644C26.889 44.7501 26.5044 44.3293 26.0343 44.3293H21.7609C21.2909 44.3293 20.9062 44.7501 20.9062 45.2644V49.0045C20.9062 49.5188 21.2909 49.9395 21.7609 49.9395H26.0343C26.5044 49.9395 26.889 49.5188 26.889 49.0045ZM25.1796 48.0695H22.6156V46.1994H25.1796V48.0695Z'
              fill='currentColor'
              stroke='white'
              strokeWidth='0.338115'
              strokeMiterlimit={10}
            />
            <circle
              cx='52.4625'
              cy='17.3307'
              r='10.5191'
              fill='#FFD220'
            />
          </g>
          <defs>
            <clipPath id='clip0_1564_18863'>
              <rect
                width='63.1148'
                height='63.1148'
                fill='white'
                transform='translate(0.917969 0.5)'
              />
            </clipPath>
          </defs>
        </>
      ),
      key: 'accomRef'
    }
  ]

  const [openModal, setOpenModal] = useState()
  const router = useRouter()
  const mapRef = useRef()
  const aboutTourRef = useRef()
  const stepIconRef = useRef()
  const reviewRef = useRef()
  const relatedTourRef = useRef()
  const imageMapRef = useRef()
  const sectionRefs = {
    [OVERVIEW_REF]: useRef(),
    [BRIEF_REF]: useRef(),
    [TOUR_DETAIL_REF]: useRef(),
    [ROLE_REF]: useRef(),
    [ACCOM_REF]: useRef()
  }
  const stepIconMbRef = useRef()
  const { overviewRef, briefRef, tourDetailRef, roleRef, accomRef } = sectionRefs

  // handle Scroll event => add new class when scroll to section
  useEffect(() => {
    const handleScroll = () => {
      let innerHeight = window.innerHeight
      let overviewTop = overviewRef.current?.getBoundingClientRect()?.top
      let briefTop = briefRef.current?.getBoundingClientRect()?.top
      let tourDetailTop = tourDetailRef.current?.getBoundingClientRect()?.top
      let roleTop = roleRef.current?.getBoundingClientRect()?.top
      let accomTop = accomRef.current?.getBoundingClientRect()?.top
      let aboutTourRec = aboutTourRef.current?.getBoundingClientRect()
      const mapRec = mapRef.current?.getBoundingClientRect()
      // set position for map

      if (mapRef.current && !onlySmallScreen) {
        if (aboutTourRec.top <= vw(5.375)) {
          if (aboutTourRec.bottom > innerHeight) {
            mapRef.current.classList.add('sticky')
            mapRef.current.style.bottom = 'unset'
          } else if (aboutTourRec.bottom <= innerHeight) {
            mapRef.current.classList.remove('sticky')
            mapRef.current.style.position = 'absolute'
            mapRef.current.style.bottom = innerHeight - mapRec.height - vw(5.375) + 'px'
            mapRef.current.style.top = 'unset'
          }
        } else if (aboutTourRec.top > 0) {
          mapRef.current.classList.remove('sticky')
          mapRef.current.style.bottom = 'unset'
        }
      }

      //show icons when scroll over "Overview" section's position
      if (stepIconRef.current) {
        if (aboutTourRef.current?.getBoundingClientRect()?.top < 0) {
          stepIconRef.current.style.display = 'flex'
        } else {
          stepIconRef.current.style.display = 'none'
        }

        if (window?.innerWidth <= 768) {
          stepIconRef.current.style.display = 'none'
        }
      }

      if (stepIconMbRef.current) {
        if (aboutTourRef.current?.getBoundingClientRect()?.top < 0) {
          stepIconMbRef.current.style.display = 'flex'
        } else {
          stepIconMbRef.current.style.display = 'none'
        }
      }

      // in Pc, when review section appears, map&price section + stepIcon section will be hidden  and  button scroll to top will be appeared

      // when scroll to section, change activeIcon

      if (overviewTop >= 0 && overviewTop <= innerHeight) {
        setActiveIcon(0)
      } else if (briefTop >= 0 && briefTop <= innerHeight) {
        setActiveIcon(1)
      } else if (tourDetailTop >= 0 && tourDetailTop <= innerHeight) {
        setActiveIcon(2)
      } else if (roleTop >= 0 && roleTop <= innerHeight) {
        setActiveIcon(3)
      } else if (accomTop >= 0 && accomTop <= innerHeight) {
        setActiveIcon(4)
      }
    }

    window.addEventListener('scroll', handleScroll)
    return () => window.removeEventListener('scroll', handleScroll)
  }, [activeIcon, accomRef, briefRef, overviewRef, roleRef, tourDetailRef])
  return (
    <section className='overflow-hidden tour-detail-main'>
      <div className=''>
        <div className='relative flex flex-col-reverse content md:flex-row'>
          <div
            className='md:w-[55vw] w-full md:pr-[2.5vw]'
            ref={aboutTourRef}
          >
            {type !== 'promo' && (
              <>
                <h2 className='md:text-[3vw] text-[5.87vw] font-optima text-textColor font-semibold md:leading-[110%] leading-[120%] capitalize'>
                  {contentHeader?.header}
                </h2>

                {/* Step */}
                <div className='py-[3.3vw] w-full'>
                  <div className='flex justify-between w-full'>
                    {stepData.map((step, index) => {
                      return (
                        <div
                          className='step-icon flex md:gap-[0.5vw] gap-[1vw] cursor-pointer md:px-0 px-[2vw]'
                          key={index}
                          onClick={() => scrollDown(sectionRefs[step.key])}
                        >
                          <div className='flex flex-col items-center justify-start'>
                            <svg
                              xmlns='http://www.w3.org/2000/svg'
                              width={64}
                              height={64}
                              viewBox='0 0 64 64'
                              fill='#000'
                              style={{ color: `${index === activeIcon ? '#138140' : '#000'}` }}
                              className='justify-self-end md:w-[3.9375vw] w-[9.6vw] md:h-[3.9375vw] h-[9.6vw]'
                            >
                              {step.img}
                            </svg>

                            <span
                              className={`${
                                activeIcon === index && 'text-[#138140]'
                              } md:text-[1.125vw] text-[2.67vw] font-medium leading-normal md:max-w-[9vw] max-w-[18vw] line-clamp-1 md:line-clamp-none text-center`}
                            >
                              {step.title}
                            </span>
                          </div>
                          {index !== stepData.length - 1 && (
                            <Image
                              src={line}
                              alt='line'
                              className='md:w-[4vw] w-[1px] md:h-[0.67px] h-[8.267vw] relative md:top-[2.5vw] md:left-0 left-[1vw] md:translate-y-0 translate-y-[40%]'
                            />
                          )}
                        </div>
                      )
                    })}
                  </div>
                </div>

                {/*step when scroll down */}
                <div
                  className='max-md:hidden hidden py-[3.3vw] lg:w-[4.125vw] md:w-[5.125vw] lg:h-[31vw] md:h-[50vw] fixed left-0 top-1/2 -translate-y-1/2 rounded-lg'
                  style={{ boxShadow: '0px 0px 2vw 0px rgba(0, 0, 0, 0.08)' }}
                  ref={stepIconRef}
                >
                  <div className='w-full h-full flex flex-col justify-center gap-[1vw] items-center'>
                    {stepData.map((step, index) => {
                      return (
                        <div
                          className='step-icon flex md:gap-[0.5vw] gap-[1vw] cursor-pointer p-[0.8vw] rounded-full items-center justify-center'
                          key={index}
                          onClick={() => scrollDown(sectionRefs[step.key], 'start')}
                        >
                          <div className='flex flex-col items-center justify-start'>
                            <svg
                              xmlns='http://www.w3.org/2000/svg'
                              width={64}
                              height={64}
                              viewBox='0 0 64 64'
                              fill='#000'
                              className={`justify-self-end lg:w-[3vw] md:w-[4vw] lg:h-[3vw] md:h-[4vw]`}
                              style={{ color: `${index === activeIcon ? '#138140' : '#000'}` }}
                            >
                              {step.img}
                            </svg>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </div>

                {onlySmallScreen && (
                  <div
                    ref={stepIconMbRef}
                    className='fixed top-[14.93vw] right-0 w-full h-[16vw] px-[4.53vw] text-[4vw] bg-[#FFFBE9] flex items-center justify-between z-50'
                  >
                    {stepData.map((step, index) => {
                      return (
                        <div
                          className='step-icon flex md:gap-[0.5vw] gap-[1vw] cursor-pointer'
                          key={index}
                          onClick={() => scrollDown(sectionRefs[step.key])}
                        >
                          <div className='flex flex-col items-center justify-start'>
                            <svg
                              xmlns='http://www.w3.org/2000/svg'
                              width={64}
                              height={64}
                              viewBox='0 0 64 64'
                              fill='#000'
                              style={{ color: `${index === activeIcon ? '#138140' : '#000'}` }}
                              className='justify-self-end md:w-[3.9375vw] w-[9.6vw] md:h-[3.9375vw] h-[9.6vw]'
                            >
                              {step.img}
                            </svg>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                )}
              </>
            )}

            {/* overview */}
            <div ref={overviewRef}>
              <h4 className='tour-detail-header '>01 - {contentHeader?.sectionHeader?.overviewHeader}</h4>

              <div className='text-textColor lg:text-[1vw] md:text-[14px] text-[3.73vw] text-justify leading-normal opacity-80 flex flex-col md:gap-[0.5vw] gap-[4.27vw]'>
                {overview?.map((item, index) => {
                  return (
                    <p
                      key={index}
                      dangerouslySetInnerHTML={{ __html: item.text }}
                    ></p>
                  )
                })}
              </div>
            </div>

            {/* Brief */}
            <div
              className='mb-[4vw] mt-[3vw] max-lg:mx-[-4.27vw]'
              ref={briefRef}
            >
              <h4 className='tour-detail-header max-lg:ml-[4.27vw]'>
                02 - {contentHeader?.sectionHeader?.briefHeader}
              </h4>
              <TableData
                data={brief?.row}
                header={contentHeader?.briefTableHeader}
              />
            </div>

            {/* Tour Detail */}
            <div
              className=' text-textColor mb-[5.5vw]'
              ref={tourDetailRef}
            >
              <h4 className='tour-detail-header'>03 - {contentHeader?.sectionHeader?.tourDetailedHeader}</h4>
              <TourDetailStep
                data={tourDetailed?.content}
                icons={banner?.icons}
              />
            </div>

            {/* inclusion & exclusion */}
            <div ref={roleRef}>
              <h4 className='tour-detail-header'>
                04 -{' '}
                {`${contentHeader?.sectionHeader?.inclusionExclusionHeader?.inclusionHeader} & ${contentHeader?.sectionHeader?.inclusionExclusionHeader?.exclusionHeader}`}
              </h4>
              <div className='md:w-full md:m-auto w-[100vw]'>
                <div className='flex md:flex-row flex-col text-textColor lg:text-[1vw] md:text-[1.2vw] text-[3.2vw] leading-normal mb-[4.5vw] ml-[-4.267vw] md:ml-[0] md:border border-solid border-[#2e2e2e1a] md:rounded-[10px]'>
                  {/* inclusion */}
                  <div className='md:w-1/2 w-full md:border-r border-solid border-[#2e2e2e0f]'>
                    <div
                      className={`
                        md:rounded-tl-[10px] text-[3.73vw] lg:text-[1vw] md:text-[1.5vw] text-center font-bold bg-[#FFECA2] md:py-[1.25vw] py-[3.73vw]`}
                    >
                      {contentHeader?.sectionHeader?.inclusionExclusionHeader?.inclusionHeader}
                    </div>
                    <div className={`w-full md:px-[1.5vw] md:py-[2vw] p-[4.27vw]`}>
                      {inclusionAndExclusion?.inclusion?.content?.map((item, itemIndex) => {
                        return (
                          <div
                            key={itemIndex}
                            className='flex items-start md:gap-[0.75vw] gap-[3.73vw] md:mb-[0.625vw] mb-[2.13vw]'
                          >
                            <Image
                              src={inclusion}
                              alt='inclusion'
                              className='md:mt-[0.3vw] mt-[0.9vw] md:w-[0.875vw] w-[3.2vw] md:h-[0.875vw] h-[3.2vw]'
                            />
                            <span className='opacity-80'>{item.text}</span>
                          </div>
                        )
                      })}
                    </div>
                  </div>

                  {/* exclusion */}

                  <div className='md:w-1/2 w-full md:border-r border-solid border-[#2e2e2e0f]'>
                    <div
                      className={`
                       md:rounded-tr-[10px]
                       text-[3.73vw] lg:text-[1vw] md:text-[1.5vw] text-center font-bold bg-[#FFECA2] md:py-[1.25vw] py-[3.73vw]`}
                    >
                      {contentHeader?.sectionHeader?.inclusionExclusionHeader?.exclusionHeader}
                    </div>
                    <div className={`w-full md:px-[1.5vw] md:py-[2vw] p-[4.27vw]`}>
                      {inclusionAndExclusion?.exclusion?.content?.map((item, itemIndex) => {
                        return (
                          <div
                            key={itemIndex}
                            className='flex items-start md:gap-[0.75vw] gap-[3.73vw] md:mb-[0.625vw] mb-[2.13vw]'
                          >
                            <Image
                              src={exclusion}
                              alt='exclusion'
                              className='md:mt-[0.3vw] mt-[0.9vw] md:w-[0.875vw] w-[3.2vw] md:h-[0.875vw] h-[3.2vw]'
                            />
                            <span className='opacity-80'>{item.text}</span>
                          </div>
                        )
                      })}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              ref={accomRef}
              className='max-lg:mx-[-4.27vw]'
            >
              <TableData
                data={accommodation?.row}
                header={contentHeader?.accommodationTableHeader}
              />
            </div>
          </div>

          {/* price & map*/}
          <div
            className='md:w-[26.25vw] md:h-fit md:flex md:flex-col gap-[1.6875vw] hidden text-textColor md:absolute md:right-[9.725vw] lg:right-[1.6vw]'
            ref={mapRef}
          >
            {/* price */}
            {type !== 'promo' && (
              <Price
                data={{
                  button: data?.map?.button,
                  price: { header: bannerHeaders?.priceHeader, value: price }
                }}
                onClick={() => setOpenModal(true)}
              />
            )}

            <Image
              src={data?.map?.image?.sourceUrl}
              alt={data?.map?.image?.altText}
              width={1000}
              height={1000}
              className='md:block hidden w-full md:h-[30vw] h-[130vw] object-cover rounded shadow-[0_2px_50px_0_rgba(0,0,0,0.04)'
              ref={imageMapRef}
            />
          </div>
        </div>
        {/* review */}
        {reviews?.length > 0 && (
          <div
            className=' hidden-scroll overflow-auto md:overflow-hidden overflow-y-hidden md:mt-[4.5vw] mt-[11.5vw]'
            ref={reviewRef}
          >
            <div className='md:w-[62.1875vw] lg:h-[35.75vw] md:h-[40vw] md:ml-[8.125vw] md:grid flex w-fit h-[121.33vw] grid-cols-2 md:gap-[2vw] gap-[4.44vw]'>
              {reviews?.map((item, index) => {
                return (
                  <div
                    key={index}
                    className={`${(index === 0 && ' max-md:ml-[4.27vw]') || ''} ${
                      (index === reviews?.length - 1 && ' max-md:mr-[4.27vw]') || ''
                    }`}
                  >
                    <ReviewItem
                      className='our-tours-item md:flex hidden'
                      data={item}
                      lang={lang}
                    />
                    <ReviewItem
                      data={item}
                      className='md:hidden block our-tours-item-mobile w-[74.66vw]'
                      lang={lang}
                    />
                  </div>
                )
              })}
            </div>
          </div>
        )}
      </div>

      {/* Tour Slide */}
      <div
        className='mb-[14.93vw] md:mb-[8.69vw] md:px-[6.38vw] md:mt-[6.31vw] mt-[15vw]'
        ref={relatedTourRef}
      >
        <h4 className='heading-1 md:mb-[3.5vw] mb-[6.4vw] max-md:mx-[4.27vw]'>{relatedTourHeader?.heading}</h4>
        <SlideTour
          data={relatedTours}
          slug={type === 'promo' && 'hot-deals'}
          lang={lang}
        />
        <Link
          href={`/${lang}/search`}
          className='btn-secondary mx-auto mt-[9.83vw] md:mt-[3.5vw] md:w-[10vw] w-[35.6vw] flex justify-center'
          content={relatedTourHeader?.buttonContent}
        >
          <span>{relatedTourHeader?.buttonContent}</span>
        </Link>
      </div>

      {/* footer in mb */}
      {onlySmallScreen && (
        <PriceMb
          data={{
            button: data?.map?.button,
            price: { header: bannerHeaders?.priceHeader, value: price },
            map: data?.map?.image
          }}
          onClick={() => setOpenModal(true)}
        />
      )}

      {openModal && (
        <ModalCustom
          openModal={openModal}
          setOpenModal={setOpenModal}
          className='w-[91.46vw] md:w-[82.93vw] md:h-[90vh] h-[80vh]'
        >
          <div className='w-full h-full overflow-y-auto md:rounded-[16px] overflow-x-hidden'>
            <BookTour
              data={dataBookTour}
              setOpenModal={setOpenModal}
            />
          </div>
        </ModalCustom>
      )}
    </section>
  )
}
